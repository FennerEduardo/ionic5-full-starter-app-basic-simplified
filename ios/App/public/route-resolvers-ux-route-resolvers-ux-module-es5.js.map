{"version":3,"sources":["webpack:///src/app/shell/data-store.ts","webpack:///src/app/showcase/route-resolvers-ux/blocking-resolvers/blocking-resolvers.page.ts","webpack:///src/app/showcase/route-resolvers-ux/blocking-resolvers/blocking-resolvers.page.html","webpack:///src/app/showcase/route-resolvers-ux/blocking-resolvers/blocking.resolver.ts","webpack:///src/app/showcase/route-resolvers-ux/non-blocking-resolvers/non-blocking-resolvers.page.ts","webpack:///src/app/showcase/route-resolvers-ux/non-blocking-resolvers/non-blocking-resolvers.page.html","webpack:///src/app/showcase/route-resolvers-ux/non-blocking-resolvers/non-blocking.resolver.ts","webpack:///src/app/showcase/route-resolvers-ux/progressive-shell-resolvers/progressive-shell-resolvers.page.ts","webpack:///src/app/showcase/route-resolvers-ux/progressive-shell-resolvers/progressive-shell-resolvers.page.html","webpack:///src/app/showcase/route-resolvers-ux/progressive-shell-resolvers/progressive-shell.resolver.ts","webpack:///src/app/showcase/route-resolvers-ux/route-resolvers-ux.module.ts","webpack:///src/app/showcase/route-resolvers-ux/route-resolvers-ux.page.ts","webpack:///src/app/showcase/route-resolvers-ux/route-resolvers-ux.page.html"],"names":["ShellModel","isShell","DataStore","shellModel","networkDelay","settings","timeline","dataSourceObservable","dataSourceWithShellObservable","AppendShell","subscribe","dataValue","next","asObservable","dataObservable","delayObservable","pipe","delayValue","Object","assign","BlockingResovlersPage","route","console","log","data","observableValue","pageData","routeResolveData","warn","selector","templateUrl","styleUrls","BlockingResolver","showcaseService","loadingController","create","message","loadingElement","present","dismiss","getDataSourceWithDelay","dismissLoader","deferedObservable","presentLoader","NonBlockingResolversPage","promiseObservable","promiseValue","NonBlockingResolver","observablePromise","Promise","resolve","reject","ProgressiveShellResovlersPage","resolvedRouteData","dataStore","state","error","ProgressiveShellResolver","dataSource","getSimpleDataStore","routes","path","component","RouteResolversUXModule","forChild","imports","declarations","providers","RouteResovlersUXPage"],"mappings":"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","file":"route-resolvers-ux-route-resolvers-ux-module-es5.js","sourcesContent":["import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { delay, map, startWith } from 'rxjs/operators';\n\nimport { AppShellConfig } from './config/app-shell.config';\n\nexport class ShellModel {\n  isShell = false;\n}\n\nexport class DataStore<T> {\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\n  // However, in production you should set this delay to 0 in the assets/config/app-shell.config.prod.json file.\n  // tslint:disable-next-line:max-line-length\n  private networkDelay = (AppShellConfig.settings && AppShellConfig.settings.networkDelay) ? AppShellConfig.settings.networkDelay : 0;\n\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\n\n  constructor(private shellModel: T) { }\n\n  // Static function with generics\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\n    const delayObservable = of(true).pipe(\n      delay(networkDelay)\n    );\n\n    // Assign shell flag accordingly\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    return combineLatest([\n      delayObservable,\n      dataObservable\n    ]).pipe(\n      // Dismiss unnecessary delayValue\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\n      // Set the shell model as the initial value\n      startWith(Object.assign(shellModel, {isShell: true}))\n    );\n  }\n\n  load(dataSourceObservable: Observable<T>): void {\n    const dataSourceWithShellObservable = DataStore.AppendShell(dataSourceObservable, this.shellModel, this.networkDelay);\n\n    dataSourceWithShellObservable\n    .subscribe((dataValue: T & ShellModel) => {\n      this.timeline.next(dataValue);\n    });\n  }\n\n  public get state(): Observable<T & ShellModel> {\n    return this.timeline.asObservable();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// You can also use a Class object as a shell model\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\n\n@Component({\n  selector: 'app-showcase-blocking-resolvers',\n  templateUrl: './blocking-resolvers.page.html',\n  styleUrls: ['./blocking-resolvers.page.scss']\n})\nexport class BlockingResovlersPage implements OnInit {\n  // We will assign data coming from the Route Resolver to this property\n  routeResolveData: ShowcaseShellModel;\n\n  constructor(\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    console.log('Showcase Blocking Resovlers - ngOnInit()');\n\n    if (this.route && this.route.data) {\n      const dataObservable = this.route.data;\n      console.log('Showcase Blocking Resovlers - Route Resolve Observable => dataObservable: ', dataObservable);\n\n      if (dataObservable) {\n        dataObservable.subscribe(observableValue => {\n          const pageData: ShowcaseShellModel = observableValue['data'];\n          // tslint:disable-next-line:max-line-length\n          console.log('Showcase Blocking Resovlers - Subscribe to dataObservable (will emmit just one value) => PageData (' + ((pageData && pageData.isShell) ? 'SHELL' : 'REAL') + '): ', pageData);\n          if (pageData) {\n            this.routeResolveData = pageData;\n          }\n        });\n      } else {\n        console.warn('No dataObservable coming from Route Resolver data');\n      }\n    } else {\n      console.warn('No data coming from Route Resolver');\n    }\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/route-resolvers-ux\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      Blocking Resovler Showcase\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      Notice how the UX degrades when using <b>Blocking</b> Route Resolvers in Angular\n    </p>\n    <ion-row style=\"background-color: #FFF; padding: 10px;\">\n      <ion-col size=\"12\">\n        <div [ngStyle]=\"{'background-image': 'url(' + routeResolveData?.cover + ')'}\" style=\"background-size: cover; background-repeat: no-repeat;\">\n          <app-aspect-ratio [ratio]=\"{w:2, h:1}\">\n            <h4 style=\"margin: 10px; text-align: center; color: #FFF;\">Heading on top of a cover image</h4>\n          </app-aspect-ratio>\n        </div>\n      </ion-col>\n      <ion-col size=\"4\">\n        <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n          <img [src]=\"routeResolveData?.image\" alt=\"Sample Image\" style=\"width: 100%; height: 100%;\"/>\n        </app-aspect-ratio>\n      </ion-col>\n      <ion-col size=\"8\">\n        <h3 style=\"margin-top: 0px;\">\n          {{ routeResolveData?.title }}\n        </h3>\n        <p>\n          {{ routeResolveData?.description }}\n        </p>\n      </ion-col>\n    </ion-row>\n  </section>\n</ion-content>\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { LoadingController } from '@ionic/angular';\n\nimport { defer } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { ShowcaseService } from '../../showcase.service';\n\n@Injectable()\nexport class BlockingResolver implements Resolve<any> {\n  private loadingElement: any;\n\n  constructor(\n    private showcaseService: ShowcaseService,\n    private loadingController: LoadingController\n  ) { }\n\n  async presentLoader() {\n    this.loadingElement = await this.loadingController.create({\n      message: 'Loading ...'\n    });\n\n    await this.loadingElement.present();\n  }\n\n  async dismissLoader() {\n    if (this.loadingElement) {\n      await this.loadingElement.dismiss();\n    }\n  }\n\n  resolve() {\n    // WITHOUT LOADING INDICATOR\n\n    // Base Observable (where we get data from)\n    // const dataObservable = this.showcaseService.getData();\n\n    // Basic Resolver that returns the base Observable\n    // return dataObservable;\n\n\n    // WITH LOADING INDICATOR\n\n    // Base Observable (where we get data from)\n    const dataObservable = this.showcaseService.getDataSourceWithDelay().pipe(\n      finalize(() => {\n        console.log('dataObservable COMPLETED - HIDE LOADER');\n        this.dismissLoader();\n      })\n    );\n\n    const deferedObservable = defer(() => {\n      // Will be logged at the moment of subscription\n      console.log('dataObservable STARTED - SHOW LOADER');\n      this.presentLoader();\n      return dataObservable;\n    });\n\n    // Basic Resolver that returns the base Observable\n    return deferedObservable;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// You can also use a Class object as a shell model\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\n\n@Component({\n  selector: 'app-showcase-non-blocking-resolvers',\n  templateUrl: './non-blocking-resolvers.page.html',\n  styleUrls: ['./non-blocking-resolvers.page.scss']\n})\nexport class NonBlockingResolversPage implements OnInit {\n  // We will assign data coming from the Route Resolver to this property\n  routeResolveData: ShowcaseShellModel;\n\n  constructor(\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    console.log('Showcase NON Blocking Resovlers - ngOnInit()');\n\n    if (this.route && this.route.data) {\n      // We resolved a promise for the data Observable\n      const promiseObservable = this.route.data;\n      console.log('Showcase NON Blocking Resovlers - Route Resolve Observable => promiseObservable: ', promiseObservable);\n\n      if (promiseObservable) {\n        promiseObservable.subscribe(promiseValue => {\n          const dataObservable = promiseValue['data'];\n          console.log('Showcase NON Blocking Resovlers - Subscribe to promiseObservable => dataObservable: ', dataObservable);\n\n          if (dataObservable) {\n            dataObservable.subscribe(observableValue => {\n              const pageData: ShowcaseShellModel = observableValue;\n              // tslint:disable-next-line:max-line-length\n              console.log('Showcase NON Blocking Resovlers - Subscribe to dataObservable (will emmit just one value) => PageData (' + ((pageData && pageData.isShell) ? 'SHELL' : 'REAL') + '): ', pageData);\n              if (pageData) {\n                this.routeResolveData = pageData;\n              }\n            });\n          } else {\n            console.warn('No dataObservable coming from Route Resolver promiseObservable');\n          }\n        });\n      } else {\n        console.warn('No promiseObservable coming from Route Resolver data');\n      }\n    } else {\n      console.warn('No data coming from Route Resolver');\n    }\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/route-resolvers-ux\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      NON Blocking Resovler Showcase\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      With Non-Blocking Resolvers, page transition is immediate. However UX degrades because you are showing a static loading indicator while the server sends data back to the client.\n    </p>\n    <ng-container *ngIf=\"!routeResolveData\">\n      <div style=\"margin: 20px 40px; text-align: center;\">\n        <ion-spinner></ion-spinner>\n        <p>\n          <b>You can show a static shell while fetching data from the backend</b>\n        </p>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"routeResolveData\">\n      <ion-row style=\"background-color: #FFF; padding: 10px;\">\n        <ion-col size=\"12\">\n          <div [ngStyle]=\"{'background-image': 'url(' + routeResolveData?.cover + ')'}\" style=\"background-size: cover; background-repeat: no-repeat;\">\n            <app-aspect-ratio [ratio]=\"{w:2, h:1}\">\n              <h4 style=\"margin: 10px; text-align: center; color: #FFF;\">Heading on top of a cover image</h4>\n            </app-aspect-ratio>\n          </div>\n        </ion-col>\n        <ion-col size=\"4\">\n          <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n            <img [src]=\"routeResolveData?.image\" alt=\"Sample Image\" style=\"width: 100%; height: 100%;\"/>\n          </app-aspect-ratio>\n        </ion-col>\n        <ion-col size=\"8\">\n          <h3 style=\"margin-top: 0px;\">\n            {{ routeResolveData?.title }}\n          </h3>\n          <p>\n            {{ routeResolveData?.description }}\n          </p>\n        </ion-col>\n      </ion-row>\n    </ng-container>\n  </section>\n</ion-content>\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\nimport { ShowcaseService } from '../../showcase.service';\n\n@Injectable()\nexport class NonBlockingResolver implements Resolve<any> {\n\n  constructor(private showcaseService: ShowcaseService) {}\n\n  resolve() {\n\n    // Base Observable (where we get data from)\n    const dataObservable = this.showcaseService.getDataSourceWithDelay();\n\n    // NON-BLOCKING RESOLVERS\n\n    // Resolver using a ReplySubject that emits the base Observable and then completes\n    // const subject = new ReplaySubject();\n    // subject.next(dataObservable);\n    // subject.complete();\n    // return subject;\n\n    // Resolver using an Observable that emits the base Observable and then completes\n    // const observable = Observable.create((observer) => {\n    //   observer.next(dataObservable);\n    //   observer.complete();\n    // });\n    // return observable;\n\n    // Resolver using a Promise that resolves the base Observable\n    const observablePromise = new Promise((resolve, reject) => {\n      resolve(dataObservable);\n    });\n    return observablePromise;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// You can also use a Class object as a shell model\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\n\n@Component({\n  selector: 'app-showcase-progressive-shell-resolvers',\n  templateUrl: './progressive-shell-resolvers.page.html',\n  styleUrls: ['./progressive-shell-resolvers.page.scss']\n})\nexport class ProgressiveShellResovlersPage implements OnInit {\n  // We will assign data coming from the Route Resolver to this property\n  routeResolveData: ShowcaseShellModel;\n\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    console.log('Showcase Progressive Shell Resovlers - ngOnInit()');\n\n    this.route.data.subscribe((resolvedRouteData) => {\n      const dataStore = resolvedRouteData['data'];\n\n      dataStore.state.subscribe(\n        (state) => {\n          this.routeResolveData = state;\n        },\n        (error) => {}\n      );\n    },\n    (error) => {});\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"showcase/route-resolvers-ux\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>\n      Progressive Shell Showcase\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <ion-row style=\"background-color: #FFF; padding: 10px;\">\n      <ion-col size=\"12\">\n        <app-image-shell class=\"add-overlay\" animation=\"spinner\" [display]=\"'cover'\" [src]=\"routeResolveData?.cover\" [alt]=\"'Sample Image Cover'\">\n          <app-aspect-ratio [ratio]=\"{w:2, h:1}\">\n            <h4 style=\"margin: 10px; text-align: center; color: #FFF;\">Heading on top of a cover image</h4>\n          </app-aspect-ratio>\n        </app-image-shell>\n      </ion-col>\n      <ion-col size=\"4\">\n        <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n          <app-image-shell animation=\"spinner\" [src]=\"routeResolveData?.image\" [alt]=\"'Sample Image'\"></app-image-shell>\n        </app-aspect-ratio>\n      </ion-col>\n      <ion-col size=\"8\">\n        <h3 style=\"margin-top: 0px;\">\n          <app-text-shell [data]=\"routeResolveData?.title\"></app-text-shell>\n        </h3>\n        <p>\n          <app-text-shell animation=\"bouncing\" lines=\"3\" [data]=\"routeResolveData?.description\"></app-text-shell>\n        </p>\n      </ion-col>\n    </ion-row>\n  </section>\n</ion-content>\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\nimport { ShowcaseService } from '../../showcase.service';\nimport { ShowcaseShellModel } from '../../showcase-shell.model';\nimport { Observable } from 'rxjs';\nimport { DataStore } from '../../../shell/data-store';\n\n@Injectable()\nexport class ProgressiveShellResolver implements Resolve<any> {\n\n  constructor(private showcaseService: ShowcaseService) {}\n\n  resolve() {\n    const dataSource: Observable<ShowcaseShellModel> = this.showcaseService.getDataSourceWithDelay();\n    const dataStore: DataStore<ShowcaseShellModel> = this.showcaseService.getSimpleDataStore(dataSource);\n\n    return dataStore;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { IonicModule } from '@ionic/angular';\nimport { ComponentsModule } from '../../components/components.module';\n\nimport { RouteResovlersUXPage } from './route-resolvers-ux.page';\nimport { NonBlockingResolversPage } from './non-blocking-resolvers/non-blocking-resolvers.page';\nimport { BlockingResovlersPage } from './blocking-resolvers/blocking-resolvers.page';\nimport { ProgressiveShellResovlersPage } from './progressive-shell-resolvers/progressive-shell-resolvers.page';\n\nimport { BlockingResolver } from './blocking-resolvers/blocking.resolver';\nimport { NonBlockingResolver } from './non-blocking-resolvers/non-blocking.resolver';\nimport { ProgressiveShellResolver } from './progressive-shell-resolvers/progressive-shell.resolver';\n\nimport { ShowcaseService } from '../showcase.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RouteResovlersUXPage\n  },\n  {\n    path: 'blocking-resolvers',\n    component: BlockingResovlersPage,\n    resolve: {\n      data: BlockingResolver\n    }\n  },\n  {\n    path: 'non-blocking-resolvers',\n    component: NonBlockingResolversPage,\n    resolve: {\n      data: NonBlockingResolver\n    }\n  },\n  {\n    path: 'progressive-shell-resolvers',\n    component: ProgressiveShellResovlersPage,\n    resolve: {\n      data: ProgressiveShellResolver\n    }\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule,\n    HttpClientModule\n  ],\n  declarations: [\n    RouteResovlersUXPage,\n    BlockingResovlersPage,\n    NonBlockingResolversPage,\n    ProgressiveShellResovlersPage\n  ],\n  providers: [\n    BlockingResolver,\n    NonBlockingResolver,\n    ProgressiveShellResolver,\n    ShowcaseService\n  ]\n})\nexport class RouteResolversUXModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-showcase-route-resolvers-ux',\n  templateUrl: './route-resolvers-ux.page.html',\n  styleUrls: ['./route-resolvers-ux.page.scss']\n})\n\nexport class RouteResovlersUXPage {\n\n  constructor() { }\n\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      Improve Route Resolvers UX\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"showcase-content\">\n  <section class=\"showcase-section\">\n    <p>\n      Lets see the difference between the different implementations of Route Resolvers.\n    </p>\n    <h5>Blocking Route Resolvers</h5>\n    <p>\n      By default, Angular Route Resolvers won't transition to the page until the Resolver Observable completes.\n    </p>\n    <p>\n      Let's suppose the backend is slow and takes 5 seconds to fetch data and return it to the client, this is what's going to happen.\n    </p>\n    <p>\n      <b>Expected behavior:</b> Page transition will be delayed 5 seconds until the server sends data back to the client.\n    </p>\n    <ion-button expand=\"block\" [routerLink]=\"['/showcase/route-resolvers-ux/blocking-resolvers']\">Blocking Resolvers</ion-button>\n  </section>\n  <section class=\"showcase-section\">\n    <h5>NON-Blocking Route Resolvers</h5>\n    <p>\n      To avoid waiting for the Observable to complete, we can wrap the base Observable (the one we are getting data from) with a dummy Observable, Subject or Promise that emits the base Observable and immediately completes.\n    </p>\n    <p>\n      <b>Expected behavior:</b> Page transition will be instant and the transitioned page will show a blank state while the server sends data back to the client.\n    </p>\n    <ion-button expand=\"block\" [routerLink]=\"['/showcase/route-resolvers-ux/non-blocking-resolvers']\">Non-Blocking Resolvers</ion-button>\n  </section>\n  <section class=\"showcase-section\">\n    <h5>Progressive Shell Resolvers</h5>\n    <p>\n      By using the <code>DataStore</code> utility in conjunction with Angular Route Resolvers, we can solve this UX problem and make page transitions immediate.\n    </p>\n    <p>\n      This approach uses a non-blocking Resolver in conjunction with the <code>DataStore</code> utility.\n    </p>\n    <p>\n      <b>Expected behavior:</b> Page transition will be instant and the transitioned page will show some shell elements while the server sends data back to the client.\n    </p>\n    <ion-button expand=\"block\" [routerLink]=\"['/showcase/route-resolvers-ux/progressive-shell-resolvers']\">Progressive Shell Resolvers</ion-button>\n  </section>\n</ion-content>\n"]}