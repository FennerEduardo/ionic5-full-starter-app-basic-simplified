{"version":3,"sources":["webpack:///src/app/shell/data-store.ts","webpack:///src/app/user/profile/user-profile.module.ts","webpack:///src/app/user/profile/user-profile.page.ts","webpack:///src/app/user/profile/user-profile.page.html","webpack:///src/app/user/profile/user-profile.resolver.ts","webpack:///src/app/utils/resolver-helper.ts"],"names":["ShellModel","isShell","DataStore","shellModel","networkDelay","settings","timeline","dataSourceObservable","dataSourceWithShellObservable","AppendShell","subscribe","dataValue","next","asObservable","dataObservable","delayObservable","pipe","delayValue","Object","assign","routes","path","component","resolve","data","UserProfilePageModule","forChild","imports","declarations","providers","UserProfilePage","route","subscriptions","resolvedRouteData","extractData","state","profile","error","unsubscribe","selector","templateUrl","styleUrls","UserProfileResolver","userService","dataSource","getProfileDataSource","dataStore","getProfileStore","ResolverHelper","source","constructor"],"mappings":"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","file":"user-profile-user-profile-module-es5.js","sourcesContent":["import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { delay, map, startWith } from 'rxjs/operators';\n\nimport { AppShellConfig } from './config/app-shell.config';\n\nexport class ShellModel {\n  isShell = false;\n}\n\nexport class DataStore<T> {\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\n  // However, in production you should set this delay to 0 in the assets/config/app-shell.config.prod.json file.\n  // tslint:disable-next-line:max-line-length\n  private networkDelay = (AppShellConfig.settings && AppShellConfig.settings.networkDelay) ? AppShellConfig.settings.networkDelay : 0;\n\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\n\n  constructor(private shellModel: T) { }\n\n  // Static function with generics\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\n    const delayObservable = of(true).pipe(\n      delay(networkDelay)\n    );\n\n    // Assign shell flag accordingly\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n    return combineLatest([\n      delayObservable,\n      dataObservable\n    ]).pipe(\n      // Dismiss unnecessary delayValue\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\n      // Set the shell model as the initial value\n      startWith(Object.assign(shellModel, {isShell: true}))\n    );\n  }\n\n  load(dataSourceObservable: Observable<T>): void {\n    const dataSourceWithShellObservable = DataStore.AppendShell(dataSourceObservable, this.shellModel, this.networkDelay);\n\n    dataSourceWithShellObservable\n    .subscribe((dataValue: T & ShellModel) => {\n      this.timeline.next(dataValue);\n    });\n  }\n\n  public get state(): Observable<T & ShellModel> {\n    return this.timeline.asObservable();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ComponentsModule } from '../../components/components.module';\n\nimport { UserService } from '../user.service';\nimport { UserProfilePage } from './user-profile.page';\nimport { UserProfileResolver } from './user-profile.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserProfilePage,\n    resolve: {\n      data: UserProfileResolver\n    }\n  }\n];\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    ComponentsModule,\n    RouterModule.forChild(routes),\n    HttpClientModule\n  ],\n  declarations: [UserProfilePage],\n  providers: [\n    UserProfileResolver,\n    UserService\n  ]\n})\nexport class UserProfilePageModule {}\n","import { Component, OnInit, HostBinding } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { IResolvedRouteData, ResolverHelper } from '../../utils/resolver-helper';\nimport { UserProfileModel } from './user-profile.model';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.page.html',\n  styleUrls: [\n    './styles/user-profile.page.scss',\n    './styles/user-profile.shell.scss',\n    './styles/user-profile.ios.scss',\n    './styles/user-profile.md.scss'\n  ],\n})\nexport class UserProfilePage implements OnInit {\n  // Gather all component subscription in one place. Can be one Subscription or multiple (chained using the Subscription.add() method)\n  subscriptions: Subscription;\n\n  profile: UserProfileModel;\n\n  @HostBinding('class.is-shell') get isShell() {\n    return (this.profile && this.profile.isShell) ? true : false;\n  }\n\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    // On init, the route subscription is the active subscription\n    this.subscriptions = this.route.data\n    .subscribe(\n      (resolvedRouteData: IResolvedRouteData<UserProfileModel>) => {\n        // Route subscription resolved, now the active subscription is the Observable extracted from the resolved route data\n        this.subscriptions = ResolverHelper.extractData<UserProfileModel>(resolvedRouteData.data, UserProfileModel)\n        .subscribe(\n          (state) => {\n            this.profile = state;\n          },\n          (error) => {}\n        );\n      },\n      (error) => {}\n    );\n  }\n\n  // NOTE: Ionic only calls ngOnDestroy if the page was popped (ex: when navigating back)\n  // Since ngOnDestroy might not fire when you navigate from the current page, use ionViewWillLeave to cleanup Subscriptions\n  ionViewWillLeave(): void {\n    // console.log('TravelListingPage [ionViewWillLeave]');\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"user-profile-content\">\n  <ion-row class=\"user-details-section\">\n    <ion-col class=\"user-image-wrapper\">\n      <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n        <app-image-shell class=\"user-image\" animation=\"spinner\" [src]=\"profile.userImage\"></app-image-shell>\n      </app-aspect-ratio>\n    </ion-col>\n    <ion-col class=\"user-info-wrapper\">\n      <ion-row class=\"user-data-row\">\n        <ion-col size=\"9\">\n          <h3 class=\"user-name\">\n            <app-text-shell [data]=\"profile.name\"></app-text-shell>\n          </h3>\n          <h5 class=\"user-title\">\n            <app-text-shell [data]=\"profile.job\"></app-text-shell>\n          </h5>\n        </ion-col>\n        <ion-col class=\"membership-col\">\n          <span class=\"user-membership\">\n            <app-text-shell [data]=\"profile.membership\"></app-text-shell>\n          </span>\n        </ion-col>\n      </ion-row>\n      <ion-row class=\"actions-row\">\n        <ion-col class=\"main-actions\">\n          <ion-button class=\"call-to-action-btn\" size=\"small\" color=\"primary\">Follow</ion-button>\n          <ion-button class=\"call-to-action-btn\" size=\"small\" color=\"medium\">Message</ion-button>\n        </ion-col>\n        <ion-col class=\"secondary-actions\">\n          <ion-button class=\"more-btn\" size=\"small\" fill=\"clear\" color=\"medium\">\n            <ion-icon slot=\"icon-only\" ios=\"ellipsis-horizontal\" md=\"ellipsis-vertical\"></ion-icon>\n          </ion-button>\n        </ion-col>\n      </ion-row>\n    </ion-col>\n  </ion-row>\n  <ion-row class=\"user-stats-section\">\n    <ion-col class=\"user-stats-wrapper\" size=\"4\">\n      <span class=\"stat-value\">\n        <app-text-shell [data]=\"profile.likes\"></app-text-shell>\n      </span>\n      <span class=\"stat-name\">Likes</span>\n    </ion-col>\n    <ion-col class=\"user-stats-wrapper\" size=\"4\">\n      <span class=\"stat-value\">\n        <app-text-shell [data]=\"profile.followers\"></app-text-shell>\n      </span>\n      <span class=\"stat-name\">Followers</span>\n    </ion-col>\n    <ion-col class=\"user-stats-wrapper\" size=\"4\">\n      <span class=\"stat-value\">\n        <app-text-shell [data]=\"profile.following\"></app-text-shell>\n      </span>\n      <span class=\"stat-name\">Following</span>\n    </ion-col>\n  </ion-row>\n  <div class=\"user-about-section\">\n    <h3 class=\"details-section-title\">About</h3>\n    <p class=\"user-description\">\n      <app-text-shell animation=\"bouncing\" lines=\"4\" [data]=\"profile.about\"></app-text-shell>\n    </p>\n  </div>\n  <div class=\"user-friends-section\">\n    <ion-row class=\"heading-row\">\n      <h3 class=\"details-section-title\">Friends</h3>\n      <a class=\"heading-call-to-action\" [routerLink]=\"['/app/user/friends']\">See all</a>\n    </ion-row>\n    <ion-row class=\"friends-row\">\n      <ion-col class=\"friend-item\" size=\"2\" *ngFor=\"let friend of profile.friends\">\n        <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n          <app-image-shell class=\"friend-picture\" [src]=\"friend.image\"></app-image-shell>\n        </app-aspect-ratio>\n        <span class=\"friend-name\">\n          <app-text-shell [data]=\"friend.name\"></app-text-shell>\n        </span>\n      </ion-col>\n    </ion-row>\n  </div>\n\n  <div class=\"user-photos-section\">\n    <ion-row class=\"heading-row\">\n      <h3 class=\"details-section-title\">Photos</h3>\n      <a class=\"heading-call-to-action\">See all</a>\n    </ion-row>\n    <ion-row class=\"pictures-row\">\n      <ion-col class=\"picture-item\" size=\"2\" *ngFor=\"let photo of profile.photos\">\n        <app-image-shell [display]=\"'cover'\" [src]=\"photo.image\" class=\"user-photo-image\">\n          <app-aspect-ratio [ratio]=\"{w:1, h:1}\">\n          </app-aspect-ratio>\n        </app-image-shell>\n      </ion-col>\n    </ion-row>\n  </div>\n</ion-content>\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { DataStore } from '../../shell/data-store';\nimport { UserService } from '../user.service';\nimport { UserProfileModel } from './user-profile.model';\n\n@Injectable()\nexport class UserProfileResolver implements Resolve<DataStore<UserProfileModel>> {\n\n  constructor(private userService: UserService) { }\n\n  resolve(): DataStore<UserProfileModel> {\n    const dataSource: Observable<UserProfileModel> = this.userService.getProfileDataSource();\n    const dataStore: DataStore<UserProfileModel> = this.userService.getProfileStore(dataSource);\n\n    return dataStore;\n  }\n}\n","import { DataStore } from '../shell/data-store';\nimport { Observable, of } from 'rxjs';\n\nexport interface IResolvedRouteData<T> {\n  data: T | DataStore<T>;\n}\n\nexport class ResolverHelper<T> {\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\n    if (source instanceof DataStore) {\n      return source.state;\n    } else if (source instanceof constructor) {\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\n      // That's why we included an extra parameter which acts as a constructor function for type T\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\n      return of(source);\n    }\n  }\n}\n"]}