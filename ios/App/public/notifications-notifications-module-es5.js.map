{"version":3,"sources":["webpack:///src/app/notifications/notifications.module.ts","webpack:///src/app/notifications/notifications.page.ts","webpack:///src/app/notifications/notifications.page.html","webpack:///src/app/notifications/notifications.resolver.ts","webpack:///src/app/notifications/notifications.service.ts"],"names":["NotificationsPageModule","forChild","path","component","resolve","data","imports","declarations","providers","NotificationsPage","route","subscriptions","subscribe","resolvedData","dataSource","source","pageData","notifications","error","unsubscribe","selector","templateUrl","styleUrls","NotificationsResolver","notificationsService","dataObservable","getData","NotificationsService","http","get"],"mappings":"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","file":"notifications-notifications-module-es5.js","sourcesContent":["import { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { ComponentsModule } from '../components/components.module';\n\nimport { NotificationsPage } from './notifications.page';\nimport { NotificationsResolver } from '../notifications/notifications.resolver';\nimport { NotificationsService } from '../notifications/notifications.service';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    ComponentsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: NotificationsPage,\n        resolve: {\n          data: NotificationsResolver\n        }\n      }\n    ])\n  ],\n  declarations: [ NotificationsPage ],\n  providers: [\n    NotificationsResolver,\n    NotificationsService\n  ]\n})\nexport class NotificationsPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.page.html',\n  styleUrls: [\n    './styles/notifications.page.scss',\n    './styles/notifications.shell.scss'\n  ]\n})\nexport class NotificationsPage implements OnInit {\n  // Gather all component subscription in one place. Can be one Subscription or multiple (chained using the Subscription.add() method)\n  subscriptions: Subscription;\n\n  notifications: any;\n\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    // On init, the route subscription is the active subscription\n    this.subscriptions = this.route.data\n    .subscribe(\n      (resolvedData) => {\n        const dataSource: {source: Observable<any>} = resolvedData['data'];\n\n        // Route subscription resolved, now the active subscription is the the one from the dataSource\n        this.subscriptions = dataSource.source\n        .subscribe(\n          (pageData) => {\n            this.notifications = pageData;\n          },\n          (error) => {}\n        );\n      },\n      (error) => {}\n    );\n  }\n\n  // NOTE: Ionic only calls ngOnDestroy if the page was popped (ex: when navigating back)\n  // Since ngOnDestroy might not fire when you navigate from the current page, use ionViewWillLeave to cleanup Subscriptions\n  ionViewWillLeave(): void {\n    // console.log('TravelListingPage [ionViewWillLeave]');\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      Notifications\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"notifications-content\">\n  <ng-container *ngIf=\"notifications\">\n    <ion-item-group>\n      <ion-item-divider sticky>\n        <ion-label>Today</ion-label>\n      </ion-item-divider>\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.today\">\n        <ion-row class=\"notification-item-wrapper\">\n          <ion-col size=\"2\">\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\n            </app-aspect-ratio>\n          </ion-col>\n          <ion-col class=\"details-wrapper\">\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\n            <p class=\"details-description\">{{ notification.message }}</p>\n          </ion-col>\n          <ion-col size=\"2\" class=\"date-wrapper\">\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\n          </ion-col>\n        </ion-row>\n      </ion-item>\n    </ion-item-group>\n    <ion-item-group>\n      <ion-item-divider sticky>\n        <ion-label>Yesterday</ion-label>\n      </ion-item-divider>\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.yesterday\">\n        <ion-row class=\"notification-item-wrapper\">\n          <ion-col size=\"2\">\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\n            </app-aspect-ratio>\n          </ion-col>\n          <ion-col class=\"details-wrapper\">\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\n            <p class=\"details-description\">{{ notification.message }}</p>\n          </ion-col>\n          <ion-col size=\"2\" class=\"date-wrapper\">\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\n          </ion-col>\n        </ion-row>\n      </ion-item>\n    </ion-item-group>\n  </ng-container>\n</ion-content>\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NotificationsService } from './notifications.service';\n\n@Injectable()\nexport class NotificationsResolver implements Resolve<any> {\n\n  constructor(private notificationsService: NotificationsService) { }\n\n  resolve() {\n    // Base Observable (where we get data from)\n    const dataObservable: Observable<any> = this.notificationsService.getData();\n\n    return { source: dataObservable };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(private http: HttpClient) { }\n\n  public getData(): Observable<any> {\n    return this.http.get<any>('./assets/sample-data/notifications.json');\n  }\n}\n"]}