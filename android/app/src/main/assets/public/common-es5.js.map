{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/framework-delegate-d1eb6504.js","webpack:///node_modules/@ionic/core/dist/esm/haptic-ccbda579.js","webpack:///node_modules/@ionic/core/dist/esm/spinner-configs-c78e170e.js","webpack:///node_modules/@ionic/core/dist/esm/theme-c2dc54d9.js","webpack:///src/app/deals/deals.service.ts","webpack:///src/app/deals/details/deals-details.model.ts","webpack:///src/app/deals/listing/deals-listing.model.ts","webpack:///src/app/fashion/details/fashion-details.model.ts","webpack:///src/app/fashion/fashion.service.ts","webpack:///src/app/fashion/listing/fashion-listing.model.ts","webpack:///src/app/food/details/food-details.model.ts","webpack:///src/app/food/food.service.ts","webpack:///src/app/food/listing/food-listing.model.ts","webpack:///src/app/real-estate/details/real-estate-details.model.ts","webpack:///src/app/real-estate/listing/real-estate-listing.model.ts","webpack:///src/app/real-estate/real-estate.service.ts","webpack:///src/app/showcase/showcase-shell.model.ts","webpack:///src/app/showcase/showcase.service.ts","webpack:///src/app/travel/details/travel-details.model.ts","webpack:///src/app/travel/listing/travel-listing.model.ts","webpack:///src/app/travel/travel.service.ts","webpack:///src/app/user/friends/user-friends.model.ts","webpack:///src/app/user/profile/user-profile.model.ts","webpack:///src/app/user/user.service.ts","webpack:///src/app/validators/password.validator.ts"],"names":["attachComponent","delegate","container","component","cssClasses","componentProps","attachViewToDom","HTMLElement","Error","el","ownerDocument","createElement","forEach","c","classList","add","Object","assign","appendChild","componentOnReady","detachComponent","element","parentElement","removeViewFromDom","remove","Promise","resolve","hapticSelection","engine","window","TapticEngine","selection","hapticSelectionStart","gestureSelectionStart","hapticSelectionChanged","gestureSelectionChanged","hapticSelectionEnd","gestureSelectionEnd","spinners","dur","circles","fn","index","total","animationDelay","angle","Math","PI","r","style","sin","cos","step","elmDuration","cx","cy","fill","viewBox","transform","_","lines","y1","y2","SPINNERS","hostContext","selector","closest","createColorClasses","color","length","undefined","getClassList","classes","array","Array","isArray","split","filter","map","trim","getClassMap","SCHEME","openURL","url","ev","direction","test","router","document","querySelector","preventDefault","push","DealsService","http","get","pipe","data","items","itemsWithRelativeDates","dealItem","expirationDate","relativeDates","updatedListingData","otherData","listing","dataSource","listingDataStore","shellModel","load","format","updatedDetailsData","details","detailsDataStore","subtract","DealsDetailsModel","showcaseImages","relatedDeals","logo","name","description","DealsItemModel","DealsListingModel","FashionDetailsModel","type","source","colorVariants","value","sizeVariants","relatedProducts","id","FashionService","FashionItemModel","FashionListingModel","FoodDetailsModel","ratings","concept","rate","openHours","day","open","hourFrom","hourTo","tags","usersPictures","popularDishes","votesCount","reviews","user","image","reviewsCount","points","avgRating","publishedAt","message","popularRecipes","showcaseImage","chef","difficulty","time","calories","chefExtract","FoodService","slug","item","FoodItemModel","pictures","FoodListingModel","RealEstateDetailsModel","amenities","icon","RealEstateItemModel","RealEstateListingModel","RealEstateService","ShowcaseShellModel","ShowcaseShellUserModel","ShowcaseCommentModel","ShowcasePostModel","ShowcaseTaskModel","ShowcaseUser2Model","ShowcaseCompanyModel","ShowcaseCombinedTaskUserModel","ShowcaseService","openDataStream","val","console","log","timeEnd","showcaseDataStore","result","page","results","dependantDataSource","post","isShell","userId","dataObservable","jsonResponse","filteredData","company","getTasks","tasks","completeTaskData","task","taskUser","getUser","taskData","firstLoadData","getPaginationDataSource","asObservable","stackedValues","getStackedValues","next","newUser","first_name","last_name","avatar","getRand","max","min","floor","random","TravelDetailsModel","whereToStay","picture","rating","whereToEat","relatedActivities","category","TravelItemModel","TravelListingModel","TravelService","UserFriendsModel","friends","job","followers","followings","following","UserProfileModel","photos","UserService","profile","profileDataStore","friendsDataStore","PasswordValidator","formGroup","valid","key","controls","hasOwnProperty","control","areNotEqual"],"mappings":"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","file":"common-es5.js","sourcesContent":["const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.selection();\n    }\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionStart();\n    }\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionChanged();\n    }\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionEnd();\n    }\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelectionEnd as c, hapticSelection as h };\n","const spinners = {\n    'bubbles': {\n        dur: 1000,\n        circles: 9,\n        fn: (dur, index, total) => {\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            const angle = 2 * Math.PI * index / total;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circles': {\n        dur: 1000,\n        circles: 8,\n        fn: (dur, index, total) => {\n            const step = index / total;\n            const animationDelay = `${(dur * step) - dur}ms`;\n            const angle = 2 * Math.PI * step;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circular': {\n        dur: 1400,\n        elmDuration: true,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 20,\n                cx: 48,\n                cy: 48,\n                fill: 'none',\n                viewBox: '24 24 48 48',\n                transform: 'translate(0,0)',\n                style: {}\n            };\n        }\n    },\n    'crescent': {\n        dur: 750,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    'dots': {\n        dur: 750,\n        circles: 3,\n        fn: (_, index) => {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    'left': `${9 - (9 * index)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines-small': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport * as dayjs from 'dayjs';\n\nimport { DataStore } from '../shell/data-store';\nimport { DealsListingModel } from './listing/deals-listing.model';\nimport { DealsDetailsModel } from './details/deals-details.model';\n\n@Injectable()\nexport class DealsService {\n  private listingDataStore: DataStore<DealsListingModel>;\n  private detailsDataStore: DataStore<DealsDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  get relativeDates(): Array<string> {\n    return [\n      dayjs().add(1, 'day').add(8, 'hour').add(10, 'second').format('MM/DD/YYYY HH:mm:ss') as string,\n      dayjs().add(7, 'day').format('MM/DD/YYYY') as string,\n      dayjs().subtract(1, 'month').format('MM/DD/YYYY') as string,\n      dayjs().add(2, 'month').format('MM/DD/YYYY') as string\n    ];\n  }\n\n  public getListingDataSource(): Observable<DealsListingModel> {\n    return this.http.get<DealsListingModel>('./assets/sample-data/deals/listing.json')\n    .pipe(\n      map(\n        (data: DealsListingModel) => {\n          // Using rest operator to divide the data (see: https://dev.to/napoleon039/how-to-use-the-spread-and-rest-operator-4jbb)\n          const {items, ...otherData} = data;\n\n          const itemsWithRelativeDates = items.map((dealItem, index) => {\n            // Relative date (better to showcase UI micro-interactions)\n            return {...dealItem, expirationDate: this.relativeDates[index]};\n          });\n\n          // Using spread operator to concat the data (see: https://dev.to/napoleon039/how-to-use-the-spread-and-rest-operator-4jbb)\n          const updatedListingData = {...otherData, items: itemsWithRelativeDates};\n\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new DealsListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, updatedListingData);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<DealsListingModel>): DataStore<DealsListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: DealsListingModel = new DealsListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<DealsDetailsModel> {\n    return this.http.get<DealsDetailsModel>('./assets/sample-data/deals/details.json')\n    .pipe(\n      map(\n        (data: DealsDetailsModel) => {\n          const expirationDate = dayjs().add(1, 'day').add(8, 'hour').add(10, 'second').format('MM/DD/YYYY HH:mm:ss') as string;\n          const updatedDetailsData = {...data, expirationDate};\n\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new DealsDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, updatedDetailsData);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<DealsDetailsModel>): DataStore<DealsDetailsModel> {\n\n    // Initialize the model specifying that it is a shell model\n    const shellModel: DealsDetailsModel = new DealsDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    this.detailsDataStore.load(dataSource);\n\n    return this.detailsDataStore;\n  }\n\n}\n","import * as dayjs from 'dayjs';\n\nimport { ShellModel } from '../../shell/data-store';\n\nexport class DealsDetailsModel extends ShellModel {\n  showcaseImages: Array<string> = [\n    '',\n    '',\n    ''\n  ];\n  previewImage: string;\n  logo: string;\n  name: string;\n  code: string;\n  description: string;\n  // Default mock value\n  // expirationDate = '03/03/2019';\n  expirationDate: string = dayjs().add(5, 'day').format('MM/DD/YYYY HH:mm:ss') as string;\n  relatedDeals: Array<{logo: string, name: string, description: string}> = [\n    {\n      logo: '',\n      name: '',\n      description: ''\n    },\n    {\n      logo: '',\n      name: '',\n      description: ''\n    },\n    {\n      logo: '',\n      name: '',\n      description: ''\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import * as dayjs from 'dayjs';\n\nimport { ShellModel } from '../../shell/data-store';\n\nexport class DealsItemModel {\n  slug: string;\n  logo: string;\n  name: string;\n  code: string;\n  description: string;\n  // Default mock value\n  // expirationDate = '12/01/2018';\n  expirationDate: string = dayjs().add(5, 'day').format('MM/DD/YYYY HH:mm:ss') as string;\n}\n\nexport class DealsListingModel extends ShellModel {\n  items: Array<DealsItemModel> = [\n    new DealsItemModel(),\n    new DealsItemModel(),\n    new DealsItemModel(),\n    new DealsItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FashionDetailsModel extends ShellModel {\n  showcaseImages: Array<{type: string, source: string}> = [\n    {\n      type: '',\n      source: ''\n    },\n    {\n      type: '',\n      source: ''\n    },\n    {\n      type: '',\n      source: ''\n    }\n  ];\n  name: string;\n  brand: string;\n  price: number;\n  salePrice: number;\n  colorVariants: Array<{name: string, value: string, default: boolean}> = [\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    }\n  ];\n  sizeVariants: Array<{name: string, value: string, default: boolean}> = [\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    }\n  ];\n  description: string;\n  careInstructions: string;\n  upc: string;\n  relatedProducts: Array<{id: number}> = [\n    {\n      id: null\n    },\n    {\n      id: null\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { FashionListingModel } from './listing/fashion-listing.model';\nimport { FashionDetailsModel } from './details/fashion-details.model';\n\n@Injectable()\nexport class FashionService {\n  private listingDataStore: DataStore<FashionListingModel>;\n  private detailsDataStore: DataStore<FashionDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<FashionListingModel> {\n    return this.http.get<FashionListingModel>('./assets/sample-data/fashion/listing.json')\n    .pipe(\n      map(\n        (data: FashionListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new FashionListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<FashionListingModel>): DataStore<FashionListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FashionListingModel = new FashionListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<FashionDetailsModel> {\n    return this.http.get<FashionDetailsModel>('./assets/sample-data/fashion/details.json')\n    .pipe(\n      map(\n        (data: FashionDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new FashionDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<FashionDetailsModel>): DataStore<FashionDetailsModel> {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FashionDetailsModel = new FashionDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FashionItemModel {\n  price: number;\n  salePrice: number;\n  image: string;\n  squareImage: string;\n  showcaseImages: Array<string>;\n  name: string;\n  style: string;\n  relatedProducts: Array<string>;\n}\n\nexport class FashionListingModel extends ShellModel {\n  items: Array<FashionItemModel> = [\n    new FashionItemModel(),\n    new FashionItemModel(),\n    new FashionItemModel(),\n    new FashionItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FoodDetailsModel extends ShellModel {\n  icon: string;\n  slug: string;\n  showcaseImage: string;\n  name: string;\n  shortName: string;\n  style: string;\n  priceRange: number;\n  avgRating: number;\n  ratings: Array<{concept: string, rate: number}> = [\n    {\n      concept: '',\n      rate: null\n    },\n    {\n      concept: '',\n      rate: null\n    },\n    {\n      concept: '',\n      rate: null\n    }\n  ];\n  reviewsCount: number;\n  openHours: Array<{day: string, open: boolean, hourFrom: string, hourTo: string}> = [\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: false,\n      hourFrom: '',\n      hourTo: ''\n    }\n  ];\n  location: {\n    address: string,\n    city: string,\n    latlng: string,\n    mapImage: string\n  };\n  tags: Array<string> = [\n    '',\n    '',\n    ''\n  ];\n  usersPictures: Array<string> = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    ''\n  ];\n  popularDishes: Array<{name: string, rate: number, votesCount: number}> = [\n    {\n      name: '',\n      rate: null,\n      votesCount: null\n    },\n    {\n      name: '',\n      rate: null,\n      votesCount: null\n    }\n  ];\n  reviews: Array<{\n    user: {image: string, name: string, reviewsCount: number, points: number},\n    avgRating: number,\n    ratings: Array<{concept: string, rate: number}>,\n    publishedAt: string,\n    message: string\n  }> = [\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    },\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    },\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    }\n  ];\n  popularRecipes: Array<{\n    showcaseImage: string,\n    name: string,\n    chef: {name: string, image: string},\n    difficulty: string,\n    time: string,\n    calories: string,\n    chefExtract: string\n  }> = [\n    {\n      showcaseImage: '',\n      name: '',\n      chef: {\n        name: '',\n        image: ''\n      },\n      difficulty: '',\n      time: '',\n      calories: '',\n      chefExtract: ''\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map, flatMap } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { FoodListingModel } from './listing/food-listing.model';\nimport { FoodDetailsModel } from './details/food-details.model';\n\n@Injectable()\nexport class FoodService {\n  private listingDataStore: DataStore<FoodListingModel>;\n  private detailsDataStore: DataStore<FoodDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<FoodListingModel> {\n    return this.http.get<FoodListingModel>('./assets/sample-data/food/listing.json')\n    .pipe(\n      map(\n        (data: FoodListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new FoodListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<FoodListingModel>): DataStore<FoodListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FoodListingModel = new FoodListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(slug: string): Observable<FoodDetailsModel> {\n    return this.http.get<{items: Array<FoodDetailsModel>}>('./assets/sample-data/food/details.json')\n    .pipe(\n      flatMap(details => details.items.filter(item => item.slug === slug)),\n      map(\n        (data: FoodDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new FoodDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<FoodDetailsModel>): DataStore<FoodDetailsModel> {\n    // Initialize the model specifying that it is a shell model\n    const shellModel: FoodDetailsModel = new FoodDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    this.detailsDataStore.load(dataSource);\n\n    return this.detailsDataStore;\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FoodItemModel {\n  icon: string;\n  image: string;\n  name: string;\n  address: string;\n  priceRange: number;\n  rating: number;\n  tags: Array<string> = [\n    '',\n    '',\n    ''\n  ];\n  pictures: Array<string> = [\n    '',\n    '',\n    '',\n    '',\n    ''\n  ];\n}\n\nexport class FoodListingModel extends ShellModel {\n  items: Array<FoodItemModel> = [\n    new FoodItemModel(),\n    new FoodItemModel(),\n    new FoodItemModel(),\n    new FoodItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class RealEstateDetailsModel extends ShellModel {\n  picture: string;\n  location: {\n    address: string,\n    city: string,\n    latlng: string,\n    mapImage: string\n  };\n  description: string;\n  price: string;\n  accommodations: {\n    guests: number,\n    bedrooms: number,\n    patios: number,\n    bathrooms: number\n  };\n  amenities: Array<{name: string, icon: string}> = [\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class RealEstateItemModel {\n  slug: string;\n  picture: string;\n  address: string;\n  price: string;\n  liked: boolean;\n  accommodations: {\n    guests: number,\n    bedrooms: number,\n    beds: number,\n    bathrooms: number\n  };\n  amenities: Array<{name: string, icon: string}> = [\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    }\n  ];\n}\n\nexport class RealEstateListingModel extends ShellModel {\n  items: Array<RealEstateItemModel> = [\n    new RealEstateItemModel(),\n    new RealEstateItemModel(),\n    new RealEstateItemModel(),\n    new RealEstateItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { RealEstateListingModel } from './listing/real-estate-listing.model';\nimport { RealEstateDetailsModel } from './details/real-estate-details.model';\n\n@Injectable()\nexport class RealEstateService {\n  private listingDataStore: DataStore<RealEstateListingModel>;\n  private detailsDataStore: DataStore<RealEstateDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<RealEstateListingModel> {\n    return this.http.get<RealEstateListingModel>('./assets/sample-data/real-estate/listing.json')\n    .pipe(\n      map(\n        (data: RealEstateListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new RealEstateListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<RealEstateListingModel>): DataStore<RealEstateListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: RealEstateListingModel = new RealEstateListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<RealEstateDetailsModel> {\n    return this.http.get<RealEstateDetailsModel>('./assets/sample-data/real-estate/details.json')\n    .pipe(\n      map(\n        (data: RealEstateDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new RealEstateDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<RealEstateDetailsModel>): DataStore<RealEstateDetailsModel> {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: RealEstateDetailsModel = new RealEstateDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n}\n","import { ShellModel } from '../shell/data-store';\n\nexport class ShowcaseShellModel extends ShellModel {\n  cover: string;\n  image: string;\n  title: string;\n  description: string;\n\n  constructor() {\n    super();\n  }\n}\n\nexport class ShowcaseShellUserModel extends ShellModel {\n  email: string;\n  first_name: string;\n  last_name: string;\n  avatar: string;\n\n  constructor() {\n    super();\n  }\n}\n\nexport class ShowcaseCommentModel extends ShellModel {\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n\n  constructor() {\n    super();\n  }\n}\n\nexport class ShowcasePostModel extends ShellModel {\n  id: number;\n  title: string;\n  body: string;\n\n  constructor() {\n    super();\n  }\n}\n\nexport class ShowcaseTaskModel extends ShellModel {\n  id: number;\n  userId: number;\n  title: string;\n  completed: boolean;\n\n  constructor() {\n    super();\n  }\n}\n\nexport class ShowcaseUser2Model extends ShellModel {\n  id: number;\n  name: string;\n  email: string;\n  username: string;\n  company?: ShowcaseCompanyModel;\n\n  constructor() {\n    super();\n  }\n}\n\nexport class ShowcaseCompanyModel extends ShellModel {\n  catchPhrase: string;\n  name: string;\n  bs: string;\n\n  constructor() {\n    super();\n  }\n}\n\nexport class ShowcaseCombinedTaskUserModel extends ShowcaseTaskModel {\n  user: ShowcaseUser2Model;\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, combineLatest, of, forkJoin, ReplaySubject, merge } from 'rxjs';\nimport { delay, finalize, tap, map, filter, concatMap } from 'rxjs/operators';\n// tslint:disable-next-line:max-line-length\nimport { ShowcaseShellModel, ShowcasePostModel, ShowcaseCommentModel, ShowcaseCombinedTaskUserModel, ShowcaseUser2Model, ShowcaseTaskModel, ShowcaseShellUserModel, ShowcaseCompanyModel } from './showcase-shell.model';\nimport { DataStore, ShellModel } from '../shell/data-store';\nimport { TravelListingModel } from '../travel/listing/travel-listing.model';\nimport { FashionListingModel } from '../fashion/listing/fashion-listing.model';\n\n@Injectable()\nexport class ShowcaseService {\n  private showcaseDataStore: DataStore<ShowcaseShellModel>;\n  private openDataStream: ReplaySubject<Array<ShowcaseShellUserModel>> = new ReplaySubject<Array<ShowcaseShellUserModel>>();\n\n  constructor(private http: HttpClient) { }\n\n  public getDataSourceWithDelay(): Observable<ShowcaseShellModel> {\n    return this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json').pipe(\n      tap(val => {\n        console.log('getData STARTED');\n        // tslint:disable-next-line:no-console\n        console.time('getData Roundtrip');\n      }),\n      delay(5000),\n      finalize(() => {\n        console.log('getData COMPLETED');\n        // tslint:disable-next-line:no-console\n        console.timeEnd('getData Roundtrip');\n      }));\n  }\n\n  public getSimpleDataSource(): Observable<ShowcaseShellModel> {\n    return this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json');\n  }\n\n  public getSimpleDataStore(dataSource: Observable<ShowcaseShellModel>): DataStore<ShowcaseShellModel> {\n    // Use cache if available\n    if (!this.showcaseDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: ShowcaseShellModel = new ShowcaseShellModel();\n      this.showcaseDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.showcaseDataStore.load(dataSource);\n    }\n    return this.showcaseDataStore;\n  }\n\n  public getListDataSource(): Observable<any> {\n    return this.http.get('https://reqres.in/api/users').pipe(map(result => result['data']));\n  }\n\n  public getPaginationDataSource(page: number): Observable<any> {\n    return this.http.get('https://reqres.in/api/users?page=' + page).pipe(\n      map(result => result['data']),\n      filter(results => results.length > 0)\n    );\n  }\n\n  public getMultipleDataSourceA(): Observable<TravelListingModel> {\n    return this.http.get<TravelListingModel>('./assets/sample-data/travel/listing.json');\n  }\n\n  public getMultipleDataSourceB(): Observable<FashionListingModel> {\n      return this.http.get<FashionListingModel>('./assets/sample-data/fashion/listing.json');\n  }\n\n  public getDependantDataSourcePost(): Observable<ShowcasePostModel> {\n    return this.http.get<any>('https://jsonplaceholder.typicode.com/posts/1');\n  }\n\n  // tslint:disable-next-line:max-line-length\n  public getDependantDataSourcePostComments(dependantDataSource: Observable<ShowcasePostModel & ShellModel>): Observable<Array<ShowcaseCommentModel>> {\n    return dependantDataSource.pipe(\n      // Filter user values that are not shells. We need to add this filter if using the combinedUserDataStore timeline\n      filter(post => !post.isShell),\n      concatMap(post => {\n        return this.http.get<any>('https://jsonplaceholder.typicode.com/comments?postId=' + post.id);\n      })\n    );\n  }\n\n  getUser(userId: number): Observable<ShowcaseUser2Model> {\n    return this.http.get<ShowcaseUser2Model>('https://jsonplaceholder.typicode.com/users/' + userId);\n  }\n\n  // get the company details, a subset of the user data\n  getUserSubsetData(userId: number): Observable<ShowcaseCompanyModel> {\n    const dataObservable = this.http.get<ShowcaseUser2Model>('https://jsonplaceholder.typicode.com/users/' + userId);\n\n    return dataObservable.pipe(\n      map((jsonResponse) => {\n        const filteredData: ShowcaseCompanyModel = {\n          ...jsonResponse.company\n        };\n        return filteredData;\n      })\n    );\n  }\n\n  getTasks(): Observable<Array<ShowcaseTaskModel>> {\n    return this.http.get<Array<ShowcaseTaskModel>>('https://jsonplaceholder.typicode.com/todos');\n  }\n\n  // Concat the task with the details of the user\n  public getCombinedTasksUserDataSource(): Observable<Array<ShowcaseCombinedTaskUserModel>> {\n    return this.getTasks().pipe(\n      concatMap(tasks => {\n        const completeTaskData = tasks.map(task => {\n          // for each task retrun a new observable with the ShowcaseCombinedTaskUserModel\n          const taskUser: Observable<ShowcaseUser2Model> = this.getUser(task.userId);\n\n          return combineLatest([\n            of(task),\n            taskUser\n          ]).pipe(\n            map(([taskData, user]: [ShowcaseTaskModel, ShowcaseUser2Model]) => {\n              return {\n                ...taskData,\n                user: user\n              } as ShowcaseCombinedTaskUserModel;\n            })\n          );\n        });\n        return forkJoin(completeTaskData);\n      })\n    );\n  }\n\n  public getOpenDataStream(): Observable<Array<ShowcaseShellUserModel>> {\n    const firstLoadData = this.getPaginationDataSource(1);\n\n    return merge(\n      this.openDataStream.asObservable(),\n      firstLoadData\n    );\n  }\n\n  public pushValuesToOpenStream(): void {\n    const stackedValues = this.getStackedValues();\n\n    this.openDataStream.next(stackedValues);\n  }\n\n  public getStackedValuesDataSource(): Observable<Array<ShowcaseShellUserModel>> {\n    const stackedValues = this.getStackedValues();\n\n    return of(stackedValues).pipe(delay(3000));\n  }\n\n  public getStackedValues(): Array<ShowcaseShellUserModel> {\n    const newUser = {\n      first_name: 'Agustin',\n      last_name: 'Nitsuga',\n      avatar: './assets/sample-images/user/person_1.jpg'\n    } as ShowcaseShellUserModel;\n\n    // Get a random integer between 1 (and only 1) and 'max'\n    const getRand: (max: number, min?: number) => number = (max, min = 1) => {\n      return Math.floor(Math.random() * max) + min;\n    };\n\n    // Randomly send one, two or three users\n    return Array(getRand(3)).fill(newUser);\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class TravelDetailsModel extends ShellModel {\n  image: string;\n  icon: string;\n  name: string;\n  category: string;\n  shortDescription: string;\n  rating: number;\n  reviewsCount: number;\n  tags: Array<string> = new Array(3).fill('');\n  fullDescription: string;\n  openHours: Array<{day: string, open: boolean, hourFrom: string, hourTo: string}> = [\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: false,\n      hourFrom: '',\n      hourTo: ''\n    }\n  ];\n  location: {\n    address: string,\n    city: string,\n    latlng: string,\n    mapImage: string\n  };\n  whereToStay: Array<{picture: string, name: string, rating: number}> = [\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    }\n  ];\n  whereToEat: Array<{picture: string, name: string, rating: number}> = [\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    }\n  ];\n  relatedActivities: Array<{picture: string, name: string, category: string, rating: number}> = [\n    {\n      picture: '',\n      name: '',\n      category: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      category: '',\n      rating: null\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class TravelItemModel {\n  image: string;\n  icon: string;\n  name: string;\n  description: string;\n  category: string;\n  address: string;\n  rating: number;\n  reviewsCount: number;\n}\n\nexport class TravelListingModel extends ShellModel {\n  items: Array<TravelItemModel> = [\n    new TravelItemModel(),\n    new TravelItemModel(),\n    new TravelItemModel(),\n    new TravelItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { TravelListingModel } from './listing/travel-listing.model';\nimport { TravelDetailsModel } from './details/travel-details.model';\n\n@Injectable()\nexport class TravelService {\n  private listingDataStore: DataStore<TravelListingModel>;\n  private detailsDataStore: DataStore<TravelDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<TravelListingModel> {\n    return this.http.get<TravelListingModel>('./assets/sample-data/travel/listing.json')\n    .pipe(\n      map(\n        (data: TravelListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new TravelListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<TravelListingModel>): DataStore<TravelListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: TravelListingModel = new TravelListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<TravelDetailsModel> {\n    return this.http.get<TravelDetailsModel>('./assets/sample-data/travel/details.json')\n    .pipe(\n      map(\n        (data: TravelDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new TravelDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<TravelDetailsModel>): DataStore<TravelDetailsModel> {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: TravelDetailsModel = new TravelDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n}\n\n","import { ShellModel } from '../../shell/data-store';\n\nexport class UserFriendsModel extends ShellModel {\n  friends: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: true\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    }\n  ];\n  followers: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: true\n    }\n  ];\n  following: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class UserProfileModel extends ShellModel {\n  userImage: string;\n  name: string;\n  membership: string;\n  job: string;\n  likes: string;\n  followers: string;\n  following: string;\n  about: string;\n  friends: Array<{image: string, name: string}> = [\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    }\n  ];\n  photos: Array<string> = [\n    '',\n    '',\n    '',\n    ''\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { UserProfileModel } from './profile/user-profile.model';\nimport { UserFriendsModel } from './friends/user-friends.model';\n\n@Injectable()\nexport class UserService {\n  private profileDataStore: DataStore<UserProfileModel>;\n  private friendsDataStore: DataStore<UserFriendsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getProfileDataSource(): Observable<UserProfileModel> {\n    return this.http.get<UserProfileModel>('./assets/sample-data/user/user-profile.json')\n    .pipe(\n      map(\n        (data: UserProfileModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const profile = new UserProfileModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. profile = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(profile, data);\n\n          return profile;\n        }\n      )\n    );\n  }\n\n  public getProfileStore(dataSource: Observable<UserProfileModel>): DataStore<UserProfileModel> {\n    // Use cache if available\n    if (!this.profileDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: UserProfileModel = new UserProfileModel();\n      this.profileDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.profileDataStore.load(dataSource);\n    }\n    return this.profileDataStore;\n  }\n\n  public getFriendsDataSource(): Observable<UserFriendsModel> {\n    return this.http.get<UserFriendsModel>('./assets/sample-data/user/user-friends.json')\n    .pipe(\n      map(\n        (data: UserFriendsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const friends = new UserFriendsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. friends = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(friends, data);\n\n          return friends;\n        }\n      )\n    );\n  }\n\n  public getFriendsStore(dataSource: Observable<UserFriendsModel>): DataStore<UserFriendsModel> {\n    // Use cache if available\n    if (!this.friendsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: UserFriendsModel = new UserFriendsModel();\n      this.friendsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.friendsDataStore.load(dataSource);\n    }\n    return this.friendsDataStore;\n  }\n\n}\n","import { FormControl, FormGroup } from '@angular/forms';\n\nexport class PasswordValidator {\n\n  // If our validation fails, we return an object with a key for the error name and a value of true.\n  // Otherwise, if the validation passes, we simply return null because there is no error.\n\n  static areNotEqual(formGroup: FormGroup) {\n    let val;\n    let valid = true;\n\n    for (const key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        const control: FormControl = <FormControl>formGroup.controls[key];\n\n        if (val === undefined) {\n          val = control.value;\n        } else {\n          if (val !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areNotEqual: true\n    };\n  }\n}\n"]}